wrapper {
  gradleVersion = "2.4"
}

enum Platform {
  OsX('mac os x|darwin|osx'),
  Windows('windows'),
  Linux('linux')
  Platform(String regex) { this.regex = regex }
  String regex
  static Platform current() {
    def osName = System.getProperty('os.name')
     values().find { osName =~ "(?i)${it.regex}" }
   }
}

ext.platform = Platform.current()

apply plugin: 'cpp'
apply plugin: 'c'
apply plugin: 'lexAndYacc'

binaries.all {
  // Define toolchain-specific compiler and linker options
  if (project.platform == Platform.OsX) {
    // TODO: Determine automatically
    cCompiler.args '-DHAVE_CONFIG_H', '-D__MACOSX_CORE__', '-isysroot',
      '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk', \
      '-mmacosx-version-min=10.4'
    cppCompiler.args '-D__MACOSX_CORE__', '-isysroot', \
      '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk', \
      '-mmacosx-version-min=10.4'
    linker.args '-F/System/Library/PrivateFrameworks', '-weak_framework', 'MultitouchSupport', \
      '-framework', 'CoreAudio', '-framework', 'CoreMIDI', '-framework', 'CoreFoundation', '-framework', \
      'IOKit', '-framework', 'Carbon', '-framework', 'AppKit', '-framework', 'Foundation', \
      '-mmacosx-version-min=10.4'
  } else if (project.platform == Platform.Linux) {
    cCompiler.args '-DHAVE_CONFIG_H', '-D__LINUX_ALSA__', '-D__PLATFORM_LINUX__'
    cppCompiler.args '-D__LINUX_ALSA__', '-D__PLATFORM_LINUX__'
    linker.args '-lasound', '-lstdc++', '-ldl', '-lm', '-lsndfile', '-lpthread'
  }
}

model {
  components {
    chuck(NativeExecutableSpec) {
      sources.all {
        exportedHeaders {
          srcDir 'src'
          srcDir 'src/lo'
        }
      }
      sources {
        yaccOutput(CSourceSet) {
          generatedBy tasks.yacc
          source.include '*.c'
        }
        lexOutput(CSourceSet) {
          generatedBy tasks.lex
          source.include '*.c'
          lib sources.yaccOutput
        }
        c {
          source {
            srcDir 'src'
            include '*.c'
            include 'lo/*.c'
            if (project.platform != Platform.Windows) {
              exclude 'chuck_win32.c'
            }
            if (project.platform != Platform.OsX) {
              exclude 'util_sndfile.c'
            }
          }
          lib sources.lexOutput
          lib sources.yaccOutput
        }
        cpp {
          source {
            srcDir 'src'
            include '*.cpp'
            include 'RtAudio/*.cpp'
            exclude 'rtaudio_c.cpp'
            exclude 'chuck_js.cpp'
            exclude 'digiio_webaudio.cpp'
          }
        }
      }
    }
  }
}

if (System.getenv("EMSCRIPTEN")?.trim()) {
  logger.info("Emscripten detected - Configuring targets")
  apply plugin: 'emscripten'
} else {
  logger.info("Emscripten not detected - Not configuring targets")
}
