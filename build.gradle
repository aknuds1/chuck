wrapper {
  gradleVersion = "2.5"
}

apply plugin: 'cpp'
apply plugin: 'c'
apply plugin: 'lexAndYacc'

enum Platform {
  OsX('mac os x|darwin|osx'),
  Windows('windows'),
  Linux('linux')
  Platform(String regex) { this.regex = regex }
  String regex
  static Platform current() {
    def osName = System.getProperty('os.name')
     values().find { osName =~ "(?i)${it.regex}" }
   }
}

ext.platform = Platform.current()
def debug = true
if (project.hasProperty('debug')) {
  debug = project.debug.toLowerCase().matches(/^(true|1)$/)
}
if (debug) {
  if (project.platform == Platform.OsX || project.platform == Platform.Linux) {
    ext.compilerFlags = ['-g',]
  }
} else {
  if (project.platform == Platform.OsX || project.platform == Platform.Linux) {
    ext.compilerFlags = ['-O3',]
  }
}

binaries.all {
  // Define toolchain-specific compiler and linker options
  cCompiler.args project.compilerFlags as String[]
  cppCompiler.args project.compilerFlags as String[]

  if (project.platform == Platform.OsX) {
    // TODO: Determine automatically
    cCompiler.args '-DHAVE_CONFIG_H', '-D__MACOSX_CORE__', '-isysroot',
      '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk', \
      '-mmacosx-version-min=10.4'
    cppCompiler.args '-D__MACOSX_CORE__', '-isysroot', \
      '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk', \
      '-mmacosx-version-min=10.4'
    linker.args '-F/System/Library/PrivateFrameworks', '-weak_framework', 'MultitouchSupport', \
      '-framework', 'CoreAudio', '-framework', 'CoreMIDI', '-framework', 'CoreFoundation', '-framework', \
      'IOKit', '-framework', 'Carbon', '-framework', 'AppKit', '-framework', 'Foundation', \
      '-mmacosx-version-min=10.4'
  } else if (project.platform == Platform.Linux) {
    if (!debug) {
      cCompiler.args '-fno-strict-aliasing'
      cppCompiler.args '-fno-strict-aliasing'
    }
    cCompiler.args '-DHAVE_CONFIG_H', '-D__PLATFORM_LINUX__ -D__CK_SNDFILE_NATIVE__'
    cppCompiler.args '-D__PLATFORM_LINUX__ -D__CK_SNDFILE_NATIVE__'

    def audioArch = (project.hasProperty('audioArchitecture')) ? audioArchitecture.toLowerCase() : 'alsa'
    if (audioArch == 'alsa') {
      cCompiler.args '-D__LINUX_ALSA__'
      cppCompiler.args '-D__LINUX_ALSA__'
      linker.args '-lasound'
    } else if (audioArch == 'jack') {
      cCompiler.args '-D__UNIX_JACK__'
      cppCompiler.args '-D__UNIX_JACK__'
      linker.args '-lasound', '-ljack '
    } else if (audioArch == 'pulse') {
      cCompiler.args '-D__LINUX_PULSE__'
      cppCompiler.args '-D__LINUX_PULSE__'
      linker.args '-lasound', '-lpulse-simple', '-lpulse'
    } else {
      throw new Exception("Unknown audioArchitecture option '${audioArchitecture}'")
    }

    linker.args '-lstdc++', '-ldl', '-lm', '-lsndfile', '-lpthread'
  }
}

model {
  components {
    chuck(NativeExecutableSpec) {
      sources.all {
        exportedHeaders {
          srcDir 'src'
          srcDir 'src/lo'
        }
      }
      sources {
        yaccOutput(CSourceSet) {
          generatedBy tasks.yacc
          source.include '*.c'
        }
        lexOutput(CSourceSet) {
          generatedBy tasks.lex
          source.include '*.c'
          lib sources.yaccOutput
        }
        c {
          source {
            srcDir 'src'
            include '*.c'
            include 'lo/*.c'
            if (project.platform != Platform.Windows) {
              exclude 'chuck_win32.c'
            }
            if (project.platform != Platform.OsX) {
              exclude 'util_sndfile.c'
            }
          }
          lib sources.lexOutput
          lib sources.yaccOutput
        }
        cpp {
          source {
            srcDir 'src'
            include '*.cpp'
            include 'RtAudio/*.cpp'
            exclude 'rtaudio_c.cpp'
            exclude 'chuck_js.cpp'
            exclude 'digiio_webaudio.cpp'
          }
        }
      }
    }
  }
}

if (System.getenv("EMSCRIPTEN")?.trim()) {
  logger.info("Emscripten detected - Configuring targets")
  apply plugin: 'emscripten'
} else {
  logger.info("Emscripten not detected - Not configuring targets")
}
